package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
	"strings"
)

var reader = bufio.NewReader(os.Stdin)

func readInt() int {
	n := 0
	fmt.Fscanf(reader, "%d\n", &n)
	return n
}

func readInt64() int64 {
	n := int64(0)
	fmt.Fscanf(reader, "%d\n", &n)
	return n
}

func readString() string {
	s, _ := reader.ReadString('\n')
	return strings.TrimSpace(s)
}

func readSliceInt() []int {
	data := strings.Split(readString(), " ")
	res := make([]int, len(data))
	for i, v := range data {
		res[i], _ = strconv.Atoi(v)
	}
	return res
}

func readSliceInt64() []int64 {
	data := strings.Split(readString(), " ")
	res := make([]int64, len(data))
	for i, v := range data {
		res[i], _ = strconv.ParseInt(v, 10, 64)
	}
	return res
}

func printSlice[T any](l []T) {
	output := make([]string, len(l))
	for i, v := range l {
		output[i] = fmt.Sprint(v)
	}
	fmt.Println(strings.Join(output, " "))
}

func Max[T int | float32 | string | int64](args ...T) T {
	res := args[0]
	for i := 1; i < len(args); i++ {
		if args[i] > res {
			res = args[i]
		}
	}
	return res
}

func Min[T int | float32 | string | int64](args ...T) T {
	res := args[0]
	for i := 1; i < len(args); i++ {
		if args[i] < res {
			res = args[i]
		}
	}
	return res
}

func makeRange(i, j int) []int {
	res := make([]int, j-i)
	for k := 0; k < len(res); k++ {
		res[k] = i + k
	}
	return res
}

func gcd(a, b int) int {
	for b > 0 {
		a, b = b, a%b
	}
	return a
}

func lcm(a, b int) int {
	return a * (b / gcd(a, b))
}

func run(n, m int) int {
	res := 1
	// for modv := 2; modv <= (m+n)/2; modv += 1 {

	// }
	z := map[int][][]int{}
	for b := int(1); b <= m; b++ {
		for a := int(1); a <= m; a++ {
			if b*gcd(a, b)%(a+b) == 0 {
				fmt.Println("b=", b, "a=", a, "gcd", gcd(a, b), "lcm", lcm(a, b))
				z[gcd(a, b)] = append(z[gcd(a, b)], []int{b, a, b + a, lcm(a, b)})
				res += 1
			}
		}
	}
	keys := []int{}
	for g := range z {
		keys = append(keys, g)
	}

	sort.Ints(keys)
	for _, g := range keys {
		fmt.Println(g, z[g])
	}
	return res
	// res := n
	// for b := int64(2); b <= m; b++ {
	// 	if b*(b-1) > n {
	// 		break
	// 	}
	// 	for x := b - 1; x*b <= n; x += b {
	// 		res += 1
	// 	}
	// }
	// return res
}
func main() {
	ntest := readInt()
	// ntest := 1

	for nt := 0; nt < ntest; nt++ {
		l := readSliceInt()
		fmt.Println(run(l[0], l[1]))

	}

}
