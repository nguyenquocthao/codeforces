package main

import (
	"bufio"
	"fmt"
	"os"
	"slices"
	"strconv"
	"strings"
)

var reader = bufio.NewReader(os.Stdin)

func readInt() int {
	n := 0
	fmt.Fscanf(reader, "%d\n", &n)
	return n
}

func readInt64() int64 {
	n := int64(0)
	fmt.Fscanf(reader, "%d\n", &n)
	return n
}

func readString() string {
	s, _ := reader.ReadString('\n')
	return strings.TrimSpace(s)
}

func readSliceInt() []int {
	s := strings.TrimSpace(readString())
	if s == "" {
		return []int{}
	}
	data := strings.Split(s, " ")
	res := make([]int, len(data))
	for i, v := range data {
		res[i], _ = strconv.Atoi(v)
	}
	return res
}

func readSliceInt64() []int64 {
	s := strings.TrimSpace(readString())
	if s == "" {
		return []int64{}
	}
	data := strings.Split(s, " ")
	res := make([]int64, len(data))
	for i, v := range data {
		res[i], _ = strconv.ParseInt(v, 10, 64)
	}
	return res
}

func readSliceString() []string {
	s := strings.TrimSpace(readString())
	if s == "" {
		return []string{}
	}
	return strings.Split(s, " ")
}

func printSlice[T any](l []T) {
	output := make([]string, len(l))
	for i, v := range l {
		output[i] = fmt.Sprint(v)
	}
	fmt.Println(strings.Join(output, " "))
}

func Max[T int | float32 | string | int64 | byte](args ...T) T {
	res := args[0]
	for i := 1; i < len(args); i++ {
		if args[i] > res {
			res = args[i]
		}
	}
	return res
}

func Min[T int | float32 | string | int64 | byte](args ...T) T {
	res := args[0]
	for i := 1; i < len(args); i++ {
		if args[i] < res {
			res = args[i]
		}
	}
	return res
}

func Sum[T int | float32 | int64](args ...T) T {
	var res T
	for _, v := range args {
		res += v
	}
	return res
}

func abs[T int | int64](v T) T {
	if v < 0 {
		return -v
	}
	return v
}

func reverseStr(s string) string {
	rns := []rune(s) // convert to rune
	for i, j := 0, len(rns)-1; i < j; i, j = i+1, j-1 {
		// swap the letters of the string,
		// like first with last and so on.
		rns[i], rns[j] = rns[j], rns[i]
	}

	// return the reversed string.
	return string(rns)
}

func Unique[T comparable](l []T) []T {
	m := map[T]bool{}
	for _, v := range l {
		m[v] = true
	}
	res := make([]T, 0, len(l))
	for v := range m {
		res = append(res, v)
	}
	return res
}

func divceil(a, b int) int {
	res := a / b
	if a%b > 0 {
		res += 1
	}
	return res
}

func makeRange(i, j int) []int {
	res := make([]int, j-i)
	for k := 0; k < len(res); k++ {
		res[k] = i + k
	}
	return res
}

func Repeat[T any](v T, n int) []T {
	res := make([]T, n)
	for i := 0; i < n; i++ {
		res[i] = v
	}
	return res
}

func divneg(a, b int) int {
	res := a / b
	m := a % b
	if m < 0 {
		res -= 1
	}
	return res
}

func accumulate(a []int64) []int64 {
	res := make([]int64, len(a)+1)
	for i, v := range a {
		res[i+1] = res[i] + v
	}
	return res
}

func Count[T comparable](l []T) map[T]int {
	m := map[T]int{}
	for _, v := range l {
		m[v] += 1
	}
	return m
}

func Keys[K comparable, V any](m map[K]V) []K {
	res := []K{}
	for k := range m {
		res = append(res, k)
	}
	return res
}

const MAXN int = 2e5 + 5

type Matrix [10][10]int

func NewMatrix() Matrix {
	res := Matrix{}
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			res[i][j] = 20 * MAXN
		}
	}
	return res
}

func BuildMat(x int) Matrix {
	m := NewMatrix()
	m[0][x] = 0
	for i := 1; i < 10; i++ {
		m[i][i] = i
		m[i][0] = i
	}
	return m
}

func MulMat(m1, m2 Matrix) Matrix {
	c := NewMatrix()
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			if m1[i][j] >= 20*MAXN {
				continue
			}
			for k := 0; k < 10; k++ {
				v := m1[i][j] + m2[j][k]
				if v < c[i][k] {
					c[i][k] = v
				}
			}
		}
	}
	return c
}

func run(s string, k int) []int {
	n := len(s)

	// Initialize vector of nodes
	vec := make([]Matrix, n)
	for i := 0; i < n; i++ {
		vec[i] = BuildMat(int(s[i] - '0'))
	}

	// Process in chunks of size k
	for i := k - 1; i < n; i += k {
		lNode := []Matrix{BuildMat(0)}
		rNode := []Matrix{BuildMat(0)}

		// Compute left node chain
		for j := i - 1; j >= i-k+1; j-- {
			lNode = append(lNode, MulMat(vec[j], lNode[len(lNode)-1]))
		}

		// Compute right node chain
		for j := i; j < min(n, i+k); j++ {
			rNode = append(rNode, MulMat(rNode[len(rNode)-1], vec[j]))
		}

		slices.Reverse(lNode)

		// Calculate and print results
		for val := 0; val < len(rNode)-1; val++ {
			fmt.Print(MulMat(lNode[val], rNode[val+1])[0][0], " ")
		}
	}

	fmt.Println()
	return []int{}

	// M, pre, suf := make([]Matrix, n+1), make([]Matrix, n+1), make([]Matrix, n+1)
	// for i := 1; i <= n; i++ {
	// 	M[i] = BuildMat(int(s[i-1] - '0'))
	// }
	// pre[1] = M[1]
	// for i := 2; i <= n; i++ {
	// 	if i%k == 0 {
	// 		pre[i] = M[i]
	// 	} else {
	// 		pre[i] = MulMat(M[i], pre[i-1])
	// 	}
	// }
	// suf[n] = M[n]
	// for i := n - 1; i >= 1; i-- {
	// 	if i%k == k-1 {
	// 		suf[i] = M[i]
	// 	} else {
	// 		suf[i] = MulMat(suf[i+1], M[i])
	// 	}
	// }
	// res := make([]int, n-k+1)
	// for i := 1; i <= n-k+1; i++ {
	// 	if i%k == 0 {
	// 		res[i-1] = suf[i][0][0]
	// 	} else {
	// 		res[i-1] = MulMat(pre[i+k-1], suf[i])[0][0]
	// 	}
	// }
	// return res

}

func main() {
	// ntest := readInt()
	ntest := 1
	for nt := 0; nt < ntest; nt++ {
		l := readSliceInt()
		// printSlice(run(readString(), l[1]))
		run((readString()), l[1])

	}
}
